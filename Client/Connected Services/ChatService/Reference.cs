//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ChatService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChatService.IChatSend_BackEnd", CallbackContract=typeof(Client.ChatService.IChatSend_BackEndCallback))]
    public interface IChatSend_BackEnd {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatSend_BackEnd/SendMessage")]
        void SendMessage(byte[] msg, string sender, string receiver);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatSend_BackEnd/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(byte[] msg, string sender, string receiver);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatSend_BackEnd/Start")]
        void Start(string Name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatSend_BackEnd/Start")]
        System.Threading.Tasks.Task StartAsync(string Name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatSend_BackEnd/Stop")]
        void Stop(string Name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatSend_BackEnd/Stop")]
        System.Threading.Tasks.Task StopAsync(string Name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatSend_BackEndCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatSend_BackEnd/ReceiveMessage")]
        void ReceiveMessage(byte[] msg, string receiver);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatSend_BackEnd/SendNames")]
        void SendNames(string[] names);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatSend_BackEndChannel : Client.ChatService.IChatSend_BackEnd, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatSend_BackEndClient : System.ServiceModel.DuplexClientBase<Client.ChatService.IChatSend_BackEnd>, Client.ChatService.IChatSend_BackEnd {
        
        public ChatSend_BackEndClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatSend_BackEndClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatSend_BackEndClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatSend_BackEndClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatSend_BackEndClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SendMessage(byte[] msg, string sender, string receiver) {
            base.Channel.SendMessage(msg, sender, receiver);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(byte[] msg, string sender, string receiver) {
            return base.Channel.SendMessageAsync(msg, sender, receiver);
        }
        
        public void Start(string Name) {
            base.Channel.Start(Name);
        }
        
        public System.Threading.Tasks.Task StartAsync(string Name) {
            return base.Channel.StartAsync(Name);
        }
        
        public void Stop(string Name) {
            base.Channel.Stop(Name);
        }
        
        public System.Threading.Tasks.Task StopAsync(string Name) {
            return base.Channel.StopAsync(Name);
        }
    }
}
